type = "directrequest"
schemaVersion = 1
name = ""
maxTaskDuration = "0s"
contractAddress = "CONTRACT_ADDRESS"
minIncomingConfirmations = 0
minContractPaymentLinkJuels = "10000000000000000"
observationSource = """
// SPDX-License-Identifier: MIT
// This is code for a node server that calls a json adapter and
// parses json code.

// First, we parse the request log and the CBOR payload inside of it
decode_log  [type="ethabidecodelog"
             data="$(jobRun.logData)"
             topics="$(jobRun.logTopics)"
             abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"]

decode_cbor [type="cborparse"
             data="$(decode_log.data)"]

// Then, we use the decoded request parameters to make an HTTP fetch
fetch [type="bridge" name="test" requestData="$(decode_cbor)"]
parse [type="jsonparse" path="$(decode_cbor.jsonPath)" data="$(fetch)"]

// Finally, we send a response on-chain.
// Note that single-word responses automatically populate
// the requestId.
encode_response [type="ethabiencode"
                 abi="(uint256 data)"
                 data="{\\"data\\": $(parse) }"]

encode_tx       [type="ethabiencode"
                 abi="fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)"
                 data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_response)}"
                 ]

submit_tx  [type="ethtx" to="CONTRACT_ADDRESS" data="$(encode_tx)"]

decode_log -> decode_cbor -> fetch ->  parse -> encode_response -> encode_tx -> submit_tx
"""
